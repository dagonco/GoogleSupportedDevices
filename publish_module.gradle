task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

ext {
    PUBLISH_GROUP_ID = 'io.github.dagonco'
    PUBLISH_ARTIFACT_ID = 'gsd'

    PUBLISH_RELEASE_NAME = 'Google Supported Devices'
    PUBLISH_DESCRIPTION = 'A library for Android to get the market name of the device.'
    PUBLISH_REPO_URL = 'https://github.com/dagonco/GoogleSupportedDevices'

    DEVELOPER_ID = 'dagonco'
    PROJECT_ID = 'GoogleSupportedDevices'
}

publishing {
    publications {
        release(MavenPublication) {
            groupId PUBLISH_GROUP_ID
            artifactId PUBLISH_ARTIFACT_ID
            version System.getenv("VERSION_NAME")

            artifact("$buildDir/outputs/aar/gsd-release.aar")
            artifact androidSourcesJar

            pom {
                name = PUBLISH_RELEASE_NAME
                description = PUBLISH_DESCRIPTION
                url = PUBLISH_REPO_URL
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = DEVELOPER_ID
                        name = 'David Gonz√°lez'
                        email = 'dagonco.dev@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:github.com/' + DEVELOPER_ID + '/' + PROJECT_ID + '.git'
                    developerConnection = 'scm:git:ssh://github.com/' + DEVELOPER_ID + '/' + PROJECT_ID + '.git'
                    url = 'https://github.com/' + DEVELOPER_ID + '/' + PROJECT_ID
                }
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.getByName("implementation").allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(
        System.getenv("GPG_KEY_ID"),
        System.getenv("GPG_KEY"),
        System.getenv("GPG_PASSWORD"),
    )
    sign publishing.publications
}